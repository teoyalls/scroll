(function ($, h, c) { var a = $([]), e = $.resize = $.extend($.resize, {}), i, k = "setTimeout", j = "resize", d = j + "-special-event", b = "delay", f = "throttleWindow"; e[b] = 250; e[f] = true; $.event.special[j] = { setup: function () { if (!e[f] && this[k]) { return false } var l = $(this); a = a.add(l); $.data(this, d, { w: l.get(0).scrollWidth, h: l.get(0).scrollHeight }); if (a.length === 1) { g() } }, teardown: function () { if (!e[f] && this[k]) { return false } var l = $(this); a = a.not(l); l.removeData(d); if (!a.length) { clearTimeout(i) } }, add: function (l) { if (!e[f] && this[k]) { return false } var n; function m(s, o, p) { var q = $(this), r = $.data(this, d); r.w = o !== c ? o : q.get(0).scrollWidth; r.h = p !== c ? p : q.get(0).scrollHeight; n.apply(this, arguments) } if ($.isFunction(l)) { n = l; return m } else { n = l.handler; l.handler = m } } }; function g() { i = h[k](function () { a.each(function () { var n = $(this), m = n.get(0).scrollWidth, l = n.get(0).scrollHeight, o = $.data(this, d); if (m !== o.w || l !== o.h) { n.trigger(j, [o.w = m, o.h = l]) } }); g() }, e[b]) } })(jQuery, this); (function ($, window) {
    $.fn.teoyallScroll = function (options) {
        var opts = $.extend({ skin: "", conced: 0, standBar: true, acrossBar: false, borderRadius: 0, scrollWidth: "8px", bottomFixed: false, rightFixed: false, autoResetRraw: false, autoHideScroll: false, beforeFn: $.noop, afterFn: $.noop, scrollFn: $.noop, afterScrollFn: $.noop }, options); return this.each(function () {
            var $this = $(this), position = $this.css("position"), screenW = $this.outerWidth(), screenH = $this.outerHeight(), mainH = 0, mainW = 0, contH = 0, contW = 0, $main = $('<div class="zr-scroll-main">'), $standScrollMode = $('<div class="zr-stand-scroll-mode">'), $standScrollWrap = $('<div class="zr-stand-scroll-wrap">'), $standScrollBar = $('<div class="zr-stand-scroll-bar">'), $acrossScrollMode = $('<div class="zr-across-scroll-mode">'), $acrossScrollWrap = $('<div class="zr-across-scroll-wrap">'), $acrossScrollBar = $('<div class="zr-across-scroll-bar">'), $topBtn = $('<div class="zr-scroll-top-btn">'), $bottomBtn = $('<div class="zr-scroll-bottom-btn">'), $leftBtn = $('<div class="zr-scroll-left-btn">'), $rightBtn = $('<div class="zr-scroll-right-btn">'), restStyle = {}, top = 0, left = 0, contTop = 0, contLeft = 0, standScrollH = 0, acrossScrollW = 0, standBarH = 0, acrossBarW = 0, standRatio = 0, acrossRatio = 0, nowScroll = "y", scroll = true, speed = 0, handle = {}; handle.toScrollBottom = function () { top = standScrollH - standBarH; contTop = contH - mainH; $standScrollBar.css("top", top); $main.scrollTop(contTop) }; handle.toScrollTop = function () { top = 0; contTop = 0; $standScrollBar.css("top", top); $main.scrollTop(contTop) }; handle.toScrollRight = function () { left = acrossScrollW - acrossBarW; contLeft = contW - mainW; $acrossScrollBar.css("left", left); $main.scrollLeft(contLeft) }; handle.toScrollLeft = function () { left = 0; contLeft = 0; $acrossScrollBar.css("left", left); $main.scrollLeft(contLeft) }; handle.restDrawScroll = function () { restWidthAndHeight() }; var restStandScroll = function () { if (opts.acrossBar && contW > screenW) { mainH = screenH - parseInt(opts.conced) } else { mainH = screenH } $standScrollMode.css({ display: "block", height: mainH }); standRatio = mainH / contH; standScrollH = $standScrollWrap.outerHeight(true); standBarH = Math.round(standScrollH * standRatio); $standScrollBar.css("height", standBarH); if (opts.bottomFixed) { top = standScrollH - standBarH; contTop = contH - mainH } $standScrollMode.css("display", "block"); $standScrollBar.css("top", top); $main.scrollTop(contTop) }; var restAcrossScroll = function () { if (opts.standBar && contH > screenH) { mainW = screenW - parseInt(opts.conced) } else { mainW = screenW } $acrossScrollMode.css({ display: "block", width: mainW }); acrossRatio = mainW / contW; acrossScrollW = $acrossScrollWrap.outerWidth(true); acrossBarW = Math.round(acrossScrollW * acrossRatio); $acrossScrollBar.css("width", acrossBarW); if (opts.rightFixed) { left = acrossScrollW - acrossBarW; contLeft = contW - mainW } $acrossScrollMode.css("display", "block"); $acrossScrollBar.css("left", left); $main.scrollLeft(contLeft) }; var restWidthAndHeight = function () { contH = $main.get(0).scrollHeight; contW = $main.get(0).scrollWidth; if (opts.standBar) { if (contH <= screenH) { contTop = 0; top = 0; $this.css("paddingRight", 0); $standScrollMode.css("display", "none"); scroll = false } else { scroll = true; restStandScroll() } } if (opts.acrossBar) { if (contW <= screenW) { $this.css("paddingBottom", 0); $acrossScrollMode.css("display", "none") } else { restAcrossScroll() } } }; $main.css({ position: "relative", width: "100%", height: "100%", boxSizing: $this.css("boxSizing"), paddingLeft: parseInt($this.css("paddingLeft")), paddingTop: parseInt($this.css("paddingTop")), paddingRight: parseInt($this.css("paddingRight")), paddingBottom: parseInt($this.css("paddingBottom")), overflow: "hidden", transform: "translate3d(0, 0, 0)" }); if (opts.skin) { $this.addClass(opts.skin + " zr-global-scroll") } else { $this.addClass("zr-global-scroll") } if (opts.autoHideScroll) { $this.addClass("scroll-toggle-animation") } if (position === "static") { restStyle.position = "relative" } if (opts.standBar && opts.conced) { restStyle.paddingRight = parseInt(opts.conced); mainH = screenH - parseInt(opts.conced) } else { restStyle.paddingRight = 0; mainH = screenH } if (opts.acrossBar && opts.conced) { restStyle.paddingBottom = parseInt(opts.conced); mainW = screenW - parseInt(opts.conced) } else { restStyle.paddingBottom = parseInt(opts.conced); mainW = screenW } restStyle.paddingTop = 0;
            restStyle.paddingLeft = 0; restStyle.overflow = "hidden"; restStyle.boxSizing = "box-sizing"; opts.beforeFn && opts.beforeFn(); $main.append($this.children()); $this.html("").append($main).css(restStyle); if (opts.standBar) { $standScrollMode.append($standScrollWrap.css({ position: "relative", width: "100%", height: "100%", }).append($topBtn).append($standScrollBar.css({ position: "absolute", borderRadius: opts.borderRadius, width: "100%", transform: "translate3d(0, 0, 0)" })).append($bottomBtn)).css({ width: opts.scrollWidth, height: mainH }); $this.append($standScrollMode); standScrollH = $standScrollWrap.outerHeight(true) } if (opts.acrossBar) { $acrossScrollMode.append($acrossScrollWrap.css({ position: "relative", width: "100%", height: "100%", }).append($leftBtn).append($acrossScrollBar.css({ position: "absolute", borderRadius: opts.borderRadius, height: "100%", transform: "translate3d(0, 0, 0)" })).append($rightBtn)).css({ width: mainW, height: opts.scrollWidth }); $this.append($acrossScrollMode); acrossScrollW = $acrossScrollWrap.outerWidth(true) } restWidthAndHeight(); opts.afterFn && opts.afterFn(handle); $standScrollBar.on("mousedown", function (e) { var startY = e.pageY, move = 0, startTop = top; nowScroll = "y"; $standScrollMode.addClass("show-opacity"); $acrossScrollMode.addClass("show-opacity"); $(document).on("mousemove.scrollM", function (e) { move = e.pageY - startY; if (startTop + move <= 0) { top = 0; contTop = 0 } else { if (startTop + move > standScrollH - standBarH) { top = standScrollH - standBarH; contTop = contH - mainH } else { top = startTop + move; contTop = Math.round(contH * (top / standScrollH)) } } $standScrollBar.css("top", top); $main.scrollTop(contTop); opts.scrollFn && opts.scrollFn(nowScroll, contTop); return false }); $(document).on("mouseup.scrollU", function () { $standScrollMode.removeClass("show-opacity"); $acrossScrollMode.removeClass("show-opacity"); opts.afterScrollFn && opts.afterScrollFn(nowScroll, contTop); $(document).off("mousemove.scrollM").off("mouseup.scrollU") }); return false }); $acrossScrollBar.on("mousedown", function (e) { var startX = e.pageX, move = 0, startLeft = left; nowScroll = "x"; $standScrollMode.addClass("show-opacity"); $acrossScrollMode.addClass("show-opacity"); $(document).on("mousemove.scrollM", function (e) { move = e.pageX - startX; if (startLeft + move <= 0) { left = 0; contLeft = 0 } else { if (startLeft + move > acrossScrollW - acrossBarW) { left = acrossScrollW - acrossBarW; contLeft = contW - mainW } else { left = startLeft + move; contLeft = Math.round(contW * (left / acrossScrollW)) } } $acrossScrollBar.css("left", left); $main.scrollLeft(contLeft); opts.scrollFn && opts.scrollFn(nowScroll, contLeft); return false }); $(document).on("mouseup.scrollU", function () { $standScrollMode.removeClass("show-opacity"); $acrossScrollMode.removeClass("show-opacity"); opts.afterScrollFn && opts.afterScrollFn(nowScroll, contLeft); $(document).off("mousemove.scrollM").off("mouseup.scrollU") }); return false }); if (opts.standBar) { $this.on("mouseover", function () { var n = contH / mainH; if (n > 8) { speed = Math.ceil(mainH / 2) } else { speed = Math.ceil(mainH / 4) } if (scroll) { $this.on("mousewheel.mouseW1 DOMMouseScroll.domS1", function (e) { var delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1)) || (e.originalEvent.detail && (e.originalEvent.detail > 0 ? -1 : 1)); if (delta > 0) { contTop = contTop - speed } else { if (delta < 0) { contTop = contTop + speed } } if (contTop <= 0) { top = 0; contTop = 0 } else { if (contTop >= contH - mainH) { top = standScrollH - standBarH; contTop = contH - mainH } else { top = Math.round(standScrollH * (contTop / contH)) } } $standScrollBar.css("top", top); $main.scrollTop(contTop); opts.afterScrollFn && opts.afterScrollFn("y", contLeft); return false }) } $this.on("mouseout", function () { $this.off("mousewheel.mouseW1").off("DOMMouseScroll.domS1"); $this.off("mouseout") }) }) } if (opts.autoResetRraw) { $main.on("resize", function () { restWidthAndHeight() }) }
        })
    }
}(jQuery, window));